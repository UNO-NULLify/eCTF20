(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{218:function(e,s,a){"use strict";a.r(s);var n=a(0),r=Object(n.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"querying"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#querying"}},[e._v("#")]),e._v(" Querying")]),e._v(" "),a("h2",{attrs:{id:"query-song"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#query-song"}},[e._v("#")]),e._v(" Query Song")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("querySong")]),e._v(" function provides the users the song is provisioned to play for, along with the regions the song is provisioned to play in.")]),e._v(" "),a("p",[a("code",[e._v("querySong")]),e._v(" only has one parameter:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("char *songName")]),e._v(" - The name of the song to query.")])]),e._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("void querySong(char *songName) {}\n")])])]),a("p",[e._v("The first step to showing the provisioned users is to get the songs owner. Since we keep track of users by ID, we need to relate that ID back to a name from the "),a("code",[e._v("device_secrets")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// First, get the songs owner\nprintf("Provisioned Users: ");\nfor (int j = 0; j < (sizeof(user_data) / sizeof(user_data[1])); j++) {\n    if (user_data[j].id == meta.owner_id) {\n        printf("%s (owner), ", user_data[j].name);\n    }\n}\n')])])]),a("p",[e._v("The rest of the users the song has been provisioned for can be found in the "),a("code",[e._v("sharedInfo")]),e._v(" field of the "),a("router-link",{attrs:{to:"/technical-reference/metadata.html"}},[e._v("metadata structure")]),e._v(". We can see which users the song has been shared with by checking which indices of "),a("code",[e._v("sharedInfo")]),e._v(" have data. The index in the array plus one (as provisioned users have a uid > 0) corresponds to the users ID. For example, if the song is shared with the user of ID 6, the sharedInfo will be stored at index 5.")],1),e._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// Next, get the users it\'s shared with\nfor(int i = 0; i < sizeof(meta.sharedInfo)/sizeof(meta.sharedInfo[0]); i++) {\n    if (meta.sharedInfo[i][0] != NULL){\n        for (int j = 0; j < (sizeof(user_data) / sizeof(user_data[1])); j++) {\n            if (user_data[j].id == (i + 1)) {\n                printf("%s, ", user_data[j].name);\n            }\n        }\n    }\n}\n')])])]),a("p",[e._v("Finally, we can tell which regions the song has been provisioned for by looking at the "),a("code",[e._v("region_ids")]),e._v(" field of the metadata. These ID's are stored sequentially, so we can break early when we hit a null. We then relate the ID back to a friendly name by using the "),a("code",[e._v("region_data")]),e._v(" from the "),a("code",[e._v("device_secrets")]),e._v(" as shown below:")]),e._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// Print provisioned regions\nprintf("Provisioned Regions: ");\nfor(int i = 0; i < sizeof(meta.region_ids)/sizeof(meta.region_ids[0]); i++) {\n    if (meta.region_ids[i] == NULL){\n        break;\n    } else {\n        for (int j = 0; j < (sizeof(region_data) / sizeof(region_data[1])); j++) {\n            if (region_data[j].id == meta.region_ids[i]) {\n                printf("%s, ", region_data[j].name);\n            }\n        }\n    }\n}\n')])])]),a("h2",{attrs:{id:"query-player"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#query-player"}},[e._v("#")]),e._v(" Query Player")]),e._v(" "),a("p",[e._v("This function runs once at device startup; telling the user what region(s) their miPod is provisioned and lists all the authorized usernames for the device. "),a("code",[e._v("query_player")]),e._v(" has no parameters and returns "),a("code",[e._v("void")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('void query_player() {\n    c->query.num_regions = PROVISIONED_REGIONS;\n    c->query.num_users = PROVISIONED_USERS;\n\n    for (int i = 0; i < PROVISIONED_REGIONS; i++) {\n        strcpy((char *)q_region_lookup(c->query, i), region_data[i].name);\n    }\n\n    for (int i = 0; i < PROVISIONED_USERS; i++) {\n        strcpy((char *)q_user_lookup(c->query, i), user_data[i].name);\n    }\n\n    mb_printf("Queried player (%d regions, %d users)\\r\\n", c->query.num_regions, c->query.num_users);\n}\n')])])])])}),[],!1,null,null,null);s.default=r.exports}}]);