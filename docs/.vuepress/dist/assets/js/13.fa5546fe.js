(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{223:function(e,t,a){"use strict";a.r(t);var s=a(0),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"attack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#attack"}},[e._v("#")]),e._v(" Attack")]),e._v(" "),a("h2",{attrs:{id:"potential-vulnerabilities"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#potential-vulnerabilities"}},[e._v("#")]),e._v(" Potential Vulnerabilities")]),e._v(" "),a("p",[e._v("The following is a curated list of potential vulnerabilities identified in the reference design via code review. These potential vulnerabilities combine to form what was our starting point for the attack phase.")]),e._v(" "),a("h3",{attrs:{id:"mipod"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mipod"}},[e._v("#")]),e._v(" miPod")]),e._v(" "),a("h5",{attrs:{id:"mipod-src-main-c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mipod-src-main-c"}},[e._v("#")]),e._v(" /miPod/src/main.c")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    (lines 31 and 32)\n\n    system("devmem 0x41200000 32 0");\n\n    system("devmem 0x41200000 32 1");\n')])])]),a("p",[e._v("Uses system to call devmem -- this binary is located at /sbin/devmem and can be replaced with a malicious binary.")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    (lines 109 and 110)\n\n    strcpy((void*)c->username, username);\n\n    strcpy((void*)c->pin, pin);\n")])])]),a("p",[e._v("Uses strcopy -- does not perform bounds checking.")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    (line 200)\n\n    strcpy((char *)c->username, username);\n")])])]),a("p",[e._v("Uses strcopy -- does not perform bounds checking.")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    (line 78)\n\n    fd = open(fname, O_RDONLY);\n")])])]),a("p",[e._v("We may be able to manipulate the environment to change what is opened or use a race condition")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    (line 215)\n\n    fd = open(song_name, O_WRONLY);\n")])])]),a("p",[e._v("We may be able to manipulate the environment to change what is opened or use a race condition")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    (line 322)\n\n    int fd = open(fname, O_WRONLY | O_CREAT | O_TRUNC);\n")])])]),a("p",[e._v("We may be able to manipulate the environment to change what is opened or use a race condition")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    (line 353)\n\n    mem = open("/dev/uio0", O_RDWR);\n\n    c = mmap(NULL, sizeof(cmd_channel), PROT_READ | PROT_WRITE, MAP_SHARED, mem, 0);\n')])])]),a("p",[e._v("We can watch/modify the contents of this.")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    (line 89)\n\n    read(fd, song_buf, sb.st_size);\n")])])]),a("p",[e._v("Check the size of the buffer vs what is passed.")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    (lines 272, 275, 278)\n\n    usleep(200000); // wait for DRM to print\n\n    . . .\n\n    usleep(200000); // wait for DRM to print\n\n    . . .\n\n    usleep(200000); // wait for DRM to print\n")])])]),a("p",[e._v("uses depricated usleep instead of nanosleep() or setitimer().")]),e._v(" "),a("hr"),e._v(" "),a("h5",{attrs:{id:"mipod-src-mipod-h"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mipod-src-mipod-h"}},[e._v("#")]),e._v(" /miPod/src/mipod.h")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    (lines 25, 28, and 29)\n\n    usleep(200000); // wait for DRM to print\n\n    . . .\n\n    #define print_prompt() printf(USER_PROMPT, "")\n\n    #define print_prompt_msg(...) printf(USER_PROMPT, __VA_ARGS__)\n')])])]),a("p",[e._v("Format string attack may be possible on uses of mp_printf(), print_prompt(), and print_prompt_msg() -- not format specified.")]),e._v(" "),a("hr"),e._v(" "),a("h3",{attrs:{id:"drm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#drm"}},[e._v("#")]),e._v(" DRM")]),e._v(" "),a("h5",{attrs:{id:"mb-drm-audio-fw-src-constants-h"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mb-drm-audio-fw-src-constants-h"}},[e._v("#")]),e._v(" /mb/drm_audio_fw/src/constants.h")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    // shared DDR address\n    #define SHARED_DDR_BASE (0x20000000 + 0x1CC00000)\n\n    // memory constants\n    #define CHUNK_SZ 16000\n    #define FIFO_CAP 4096*4\n\n    // number of seconds to record/playback\n    #define PREVIEW_TIME_SEC 30\n\n    // ADC/DAC sampling rate in Hz\n    #define AUDIO_SAMPLING_RATE 48000\n    #define BYTES_PER_SAMP 2\n    #define PREVIEW_SZ (PREVIEW_TIME_SEC * AUDIO_SAMPLING_RATE * BYTES_PER_SAMP)\n\n    // printing utility\n    #define MB_PROMPT "\\r\\nMB> "\n    #define mb_printf(...) xil_printf(MB_PROMPT __VA_ARGS__)\n\n    // protocol constants\n    #define MAX_REGIONS 64\n    #define REGION_NAME_SZ 64\n    #define MAX_USERS 64\n    #define USERNAME_SZ 64\n    #define MAX_PIN_SZ 64\n    #define MAX_SONG_SZ (1<<25)\n')])])]),a("p",[e._v("Many of the macros used throughout main.c are noted above, including the address of the mmap for IPC, sampling rates, and various values related to owners, songs, and pins.")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    (line 31)\n\n    #define MAX_SONG_SZ (1<<25)\n")])])]),a("p",[e._v("Why would they not just use the number? Also, according to Frank, this number is incorrect by default.")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    (line 23)\n\n    #define mb_printf(...) xil_printf(MB_PROMPT __VA_ARGS__)\n")])])]),a("p",[e._v("All uses of mb_printf (which is used for the system prompt and all print statements) need a formatter in the string that is passed to it. Otherwise, they may be vulnerable to a string format attack.")]),e._v(" "),a("hr"),e._v(" "),a("h5",{attrs:{id:"mb-drm-audio-fw-src-main-c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mb-drm-audio-fw-src-main-c"}},[e._v("#")]),e._v(" /mb/drm_audio_fw/src/main.c")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    (lines 34 - 38)\n\n    // change states\n    #define change_state(state, color) c->drm_state = state; setLED(led, color);\n    #define set_stopped() change_state(STOPPED, RED)\n    #define set_working() change_state(WORKING, YELLOW)\n    #define set_playing() change_state(PLAYING, GREEN)\n    #define set_paused()  change_state(PAUSED, BLUE)\n")])])]),a("p",[e._v("Important note regarding the lights on the Xilinx board and what actions they correspond to.")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    (lines 51 - 56)\n\n    // shared variable between main thread and interrupt processing thread\n    volatile static int InterruptProcessed = FALSE;\n    static XIntc InterruptController;\n\n    void myISR(void) {\n    InterruptProcessed = TRUE;\n    } \n")])])]),a("p",[e._v("The function myISR registers the interrupt as being processed.")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    (line 164)\n    mb_printf("No user logged in");\n')])])]),a("p",[e._v("This printf does not contain a format specifier and the stack may be able to be leaked if attacked using a string format attack.")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    (lines 195 - 199)\n\n    if (!locked) {\n        mb_printf("Region Match. Full Song can be played. Unlocking...");\n    } else {\n        mb_printf("Invalid region");\n    }\n')])])]),a("p",[e._v("More missing format specifiers (there are 2 here).")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    (line 227)\n\n    mb_printf("Already logged in. Please log out first.\\r\\n");\n')])])]),a("p",[e._v("More missing format specifiers.")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    (line 246 and 255)\n\n    mb_printf("Incorrect pin for user \'%s\'\\r\\n", c->username);\n\n    mb_printf("User not found\\r\\n");\n')])])]),a("p",[e._v("The user should not know if the username or pin were incorrect, upon unsuccessful login. This should be removed in our design.")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    (line 265 and 272)\n\n    mb_printf("Logging out...\\r\\n");\n\n    . . .\n\n    mb_printf("Not logged in\\r\\n");\n')])])]),a("p",[e._v("More missing format specifiers.")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    (line 369)\n\n    mb_printf("Reading Audio File...");\n')])])]),a("p",[e._v("More missing format specifiers.")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    (line 382)\n\n    mb_printf("Song is unlocked. Playing full song\\r\\n");\n')])])]),a("p",[e._v("More missing formatters.")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    (lines 393 - 415)\n\n    while (InterruptProcessed) {\n            InterruptProcessed = FALSE;\n\n            switch (c->cmd) {\n            case PAUSE:\n                mb_printf("Pausing... \\r\\n");\n                set_paused();\n                while (!InterruptProcessed) continue; // wait for interrupt\n                break;\n            case PLAY:\n                mb_printf("Resuming... \\r\\n");\n                set_playing();\n                break;\n            case STOP:\n                mb_printf("Stopping playback...");\n                return;\n            case RESTART:\n                mb_printf("Restarting song... \\r\\n");\n                rem = length; // reset song counter\n                set_playing();\n            default:\n                break;\n            }\n    }\n')])])]),a("p",[e._v("These are all missing format specifiers.")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    (lines 453 and 454)\n\n    c->song.file_size -= c->song.md.md_size;\n    c->song.wav_size -= c->song.md.md_size;\n")])])]),a("p",[e._v("All operations that rely on trusted data need to be performed on the local struct, not the shared one.")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    (lines 492 - 497)\n\n    // Congigure the DMA\n    status = fnConfigDma(&sAxiDma);\n    if(status != XST_SUCCESS) {\n    mb_printf("DMA configuration ERROR\\r\\n");\n    return XST_FAILURE;\n    }\n')])])]),a("p",[e._v("This printf does not contain a format specifier and the stack may be able to be leaked if attacked using a string format attack.")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    (line 506)\n\n    mb_printf("Audio DRM Module has Booted\\n\\r");\n')])])]),a("p",[e._v("This printf does not contain a format specifier and the stack may be able to be leaked if attacked using a string format attack.")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    (line 532 - 534)\n\n    case PLAY:\n    play_song();\n    mb_printf("Done Playing Song\\r\\n");\n')])])]),a("p",[e._v("This printf does not contain a format specifier and the stack may be able to be leaked if attacked using a string format attack.")]),e._v(" "),a("p",[e._v("IMPORTANT NOTE: There are MANY uses of strcmp in the reference code, we should replace these with strncmp and specify an expected size.")]),e._v(" "),a("hr"),e._v(" "),a("h5",{attrs:{id:"mb-drm-audio-fw-src-secrets-h"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mb-drm-audio-fw-src-secrets-h"}},[e._v("#")]),e._v(" /mb/drm_audio_fw/src/secrets.h")]),e._v(" "),a("p",[e._v("This headerfile is overwritten by the Python buildDevice script.")]),e._v(" "),a("hr"),e._v(" "),a("h5",{attrs:{id:"mb-drm-audio-fw-src-util-c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mb-drm-audio-fw-src-util-c"}},[e._v("#")]),e._v(" /mb/drm_audio_fw/src/util.c")]),e._v(" "),a("p",[e._v("This file contains the basic setup for changing the LEDs, setting up the interrupt system, and configuring the I2S controller.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    (lines 141 - 146)\n\n    if(XAxiDma_HasSg(AxiDma))\n    {\n        xil_printf(MB_PROMPT "Device configured as SG mode\\r\\n");\n\n        return XST_FAILURE;\n    }\n')])])]),a("p",[e._v("The code handling an issue where the I2S module is in SG mode has a print statement with no format specifier.")]),e._v(" "),a("hr"),e._v(" "),a("h3",{attrs:{id:"security-and-function-overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#security-and-function-overview"}},[e._v("#")]),e._v(" Security and function Overview")]),e._v(" "),a("p",[e._v("Below is a summary of all the functions added in the new design.")]),e._v(" "),a("h4",{attrs:{id:"cachecmd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cachecmd"}},[e._v("#")]),e._v(" cacheCMD")]),e._v(" "),a("p",[e._v("In this function, we copy the necessary parts of the IPC channel, so that we have a local copy of the data in BRAM that we can trust.")]),e._v(" "),a("h4",{attrs:{id:"loadsongmd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loadsongmd"}},[e._v("#")]),e._v(" loadSongMD")]),e._v(" "),a("p",[e._v("This function will load the metadata of a song into the SongMD struct. It is currently in an unfinished state.")]),e._v(" "),a("h4",{attrs:{id:"decryptsong"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#decryptsong"}},[e._v("#")]),e._v(" decryptSong")]),e._v(" "),a("p",[e._v("This function will decrypt the song. This is kind of Drew's thing and it hasn't been written yet, so I don't know the details...")]),e._v(" "),a("h4",{attrs:{id:"checkauth"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#checkauth"}},[e._v("#")]),e._v(" checkAuth")]),e._v(" "),a("p",[e._v("This function checks if the user and player are authorized to play a given song. It specifically checks if the user is an owner of the song, if they have had the song shared with them, and then if the device is provisioned for one of the regions that the song is provisioned for.")]),e._v(" "),a("h4",{attrs:{id:"logon"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#logon"}},[e._v("#")]),e._v(" logOn")]),e._v(" "),a("p",[e._v("Allows the user to login by checking if they are already logged in, checking if the username is provisioned for the board, and then checking the hash of the given pin against the stored hash of the user's pin. If they are already logged in, it will print a message saying so, otherwise there will be no or a generic error.")]),e._v(" "),a("h4",{attrs:{id:"logoff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#logoff"}},[e._v("#")]),e._v(" logOff")]),e._v(" "),a("p",[e._v("Checks if the users is logged in and if they are, then it wipes the UserMD struct.")]),e._v(" "),a("h4",{attrs:{id:"share"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#share"}},[e._v("#")]),e._v(" share")]),e._v(" "),a("p",[e._v("Checks if the user is logged in, if they are the owner of the song, if the recipient exists, if the recipient already has access to the song, and if the song can be shared. If all of those checks pass, then it performs all functionality needed to share the song with the user.")]),e._v(" "),a("h4",{attrs:{id:"querysong"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#querysong"}},[e._v("#")]),e._v(" querySong")]),e._v(" "),a("p",[e._v("Checks if the user is logged in and if the song is loaded. If those pass, then it prints out all of the song regions, the song owner, and all shared users.")]),e._v(" "),a("h4",{attrs:{id:"queryplayer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queryplayer"}},[e._v("#")]),e._v(" queryPlayer")]),e._v(" "),a("p",[e._v("Prints all of the player regions and all of the device users.")]),e._v(" "),a("h4",{attrs:{id:"main"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#main"}},[e._v("#")]),e._v(" main")]),e._v(" "),a("p",[e._v("Wipes the command channel, the songMD struct, UserMD struct, processes the interrupt, calls cacheCMD to cache the command channel, and calls the correct function based off of the command given.")]),e._v(" "),a("h3",{attrs:{id:"hardware"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hardware"}},[e._v("#")]),e._v(" Hardware")]),e._v(" "),a("h5",{attrs:{id:"cold-boot-attacks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cold-boot-attacks"}},[e._v("#")]),e._v(" Cold Boot Attacks")]),e._v(" "),a("p",[a("strong",[e._v("Step 1:")]),e._v(" freeze the processor with compressed air!")]),e._v(" "),a("p",[a("strong",[e._v("Step 2:")]),e._v(" Power down board while continuing to use compressed air on the CPU")]),e._v(" "),a("p",[a("strong",[e._v("Step 3:")]),e._v(" while continuing to apply compressed air boot the board with a modified pl that allows for dram to be dumped")]),e._v(" "),a("p",[a("strong",[e._v("Step 4:")]),e._v(" Listen to the socket for the dram dumped out by the custom pl")])])}),[],!1,null,null,null);t.default=n.exports}}]);