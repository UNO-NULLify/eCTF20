#-----------------------------------------------------------
# Vivado v2017.4 (64-bit)
# SW Build 2086221 on Fri Dec 15 20:54:30 MST 2017
# IP Build 2085800 on Fri Dec 15 22:25:07 MST 2017
# Start of session at: Wed Feb 19 22:54:48 2020
# Process ID: 23591
# Current directory: /ectf/pl
# Command line: vivado -mode batch -source ..//pl/proj/create_project.tcl -tclargs --project_name test
# Log file: /ectf/pl/vivado.log
# Journal file: /ectf/pl/vivado.jou
#-----------------------------------------------------------
source ..//pl/proj/create_project.tcl
# set origin_dir "."
# if { [info exists ::origin_dir_loc] } {
#   set origin_dir $::origin_dir_loc
# }
# set project_name "test"
# if { [info exists ::user_project_name] } {
#   set project_name $::user_project_name
# }
# variable script_file
# set script_file "create_project.tcl"
# proc help {} {
#   variable script_file
#   puts "\nDescription:"
#   puts "Recreate a Vivado project from this script. The created project will be"
#   puts "functionally equivalent to the original project for which this script was"
#   puts "generated. The script contains commands for creating a project, filesets,"
#   puts "runs, adding/importing sources and setting properties on various objects.\n"
#   puts "Syntax:"
#   puts "$script_file"
#   puts "$script_file -tclargs \[--origin_dir <path>\]"
#   puts "$script_file -tclargs \[--project_name <name>\]"
#   puts "$script_file -tclargs \[--help\]\n"
#   puts "Usage:"
#   puts "Name                   Description"
#   puts "-------------------------------------------------------------------------"
#   puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
#   puts "                       origin_dir path value is \".\", otherwise, the value"
#   puts "                       that was set with the \"-paths_relative_to\" switch"
#   puts "                       when this script was generated.\n"
#   puts "\[--project_name <name>\] Create project with the specified name. Default"
#   puts "                       name is the name of the project from where this"
#   puts "                       script was generated.\n"
#   puts "\[--help\]               Print help information for this script"
#   puts "-------------------------------------------------------------------------\n"
#   exit 0
# }
# if { $::argc > 0 } {
#   for {set i 0} {$i < [llength $::argc]} {incr i} {
#     set option [string trim [lindex $::argv $i]]
#     switch -regexp -- $option {
#       "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
#       "--project_name" { incr i; set project_name [lindex $::argv $i] }
#       "--help"         { help }
#       default {
#         if { [regexp {^-} $option] } {
#           puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
#           return 1
#         }
#       }
#     }
#   }
# }
# set orig_proj_dir "[file normalize "$origin_dir/test"]"
# create_project ${project_name} ./${project_name} -part xc7z007sclg400-1
# set proj_dir [get_property directory [current_project]]
# set obj [current_project]
# set_property -name "board_connections" -value "" -objects $obj
# set_property -name "board_part" -value "" -objects $obj
# set_property -name "compxlib.activehdl_compiled_library_dir" -value "$proj_dir/${project_name}.cache/compile_simlib/activehdl" -objects $obj
# set_property -name "compxlib.funcsim" -value "1" -objects $obj
# set_property -name "compxlib.ies_compiled_library_dir" -value "$proj_dir/${project_name}.cache/compile_simlib/ies" -objects $obj
# set_property -name "compxlib.modelsim_compiled_library_dir" -value "$proj_dir/${project_name}.cache/compile_simlib/modelsim" -objects $obj
# set_property -name "compxlib.overwrite_libs" -value "0" -objects $obj
# set_property -name "compxlib.questa_compiled_library_dir" -value "$proj_dir/${project_name}.cache/compile_simlib/questa" -objects $obj
# set_property -name "compxlib.riviera_compiled_library_dir" -value "$proj_dir/${project_name}.cache/compile_simlib/riviera" -objects $obj
# set_property -name "compxlib.timesim" -value "1" -objects $obj
# set_property -name "compxlib.vcs_compiled_library_dir" -value "$proj_dir/${project_name}.cache/compile_simlib/vcs" -objects $obj
# set_property -name "compxlib.xsim_compiled_library_dir" -value "" -objects $obj
# set_property -name "corecontainer.enable" -value "0" -objects $obj
# set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
# set_property -name "dsa.num_compute_units" -value "60" -objects $obj
# set_property -name "dsa.rom.debug_type" -value "0" -objects $obj
# set_property -name "dsa.rom.prom_type" -value "0" -objects $obj
# set_property -name "enable_optional_runs_sta" -value "0" -objects $obj
# set_property -name "generate_ip_upgrade_log" -value "1" -objects $obj
# set_property -name "ip_cache_permissions" -value "read write" -objects $obj
# set_property -name "ip_interface_inference_priority" -value "" -objects $obj
# set_property -name "ip_output_repo" -value "/ectf_backup/pl/repo/cache" -objects $obj
# set_property -name "part" -value "xc7z007sclg400-1" -objects $obj
# set_property -name "project_type" -value "Default" -objects $obj
# set_property -name "pr_flow" -value "0" -objects $obj
# set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
# set_property -name "sim.use_ip_compiled_libs" -value "1" -objects $obj
# set_property -name "simulator_language" -value "Mixed" -objects $obj
# set_property -name "source_mgmt_mode" -value "All" -objects $obj
# set_property -name "target_language" -value "VHDL" -objects $obj
# set_property -name "target_simulator" -value "XSim" -objects $obj
# set_property -name "xpm_libraries" -value "XPM_CDC XPM_FIFO XPM_MEMORY" -objects $obj
# set_property -name "xsim.array_display_limit" -value "1024" -objects $obj
# set_property -name "xsim.radix" -value "hex" -objects $obj
# set_property -name "xsim.time_unit" -value "ns" -objects $obj
# set_property -name "xsim.trace_limit" -value "65536" -objects $obj
# if {[string equal [get_filesets -quiet sources_1] ""]} {
#   create_fileset -srcset sources_1
# }
# set obj [get_filesets sources_1]
# set_property "ip_repo_paths" "[file normalize "$origin_dir/../repo"]" $obj
# update_ip_catalog -rebuild
INFO: [IP_Flow 19-234] Refreshing IP repositories
WARNING: [IP_Flow 19-2248] Failed to load user IP repository '/ectf/repo'; Can't find the specified path.
If this directory should no longer be in your list of user repositories, go to the IP Settings dialog and remove it.
INFO: [IP_Flow 19-2313] Loaded Vivado IP repository '/opt/Xilinx/Vivado/2017.4/data/ip'.
# set obj [get_filesets sources_1]
# set files [list \
#  "[file normalize "$origin_dir/../src/hdl/i2s_output.vhd"]"\
#  "[file normalize "$origin_dir/../src/bd/system/hdl/system_wrapper.vhd"]"\
# ]
# add_files -norecurse -fileset $obj $files
ERROR: [Vivado 12-172] File or Directory '/ectf/src/hdl/i2s_output.vhd' does not exist
INFO: [Common 17-206] Exiting Vivado at Wed Feb 19 22:54:53 2020...
