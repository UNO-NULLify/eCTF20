#!/usr/bin/env python3
"""
Description: Creates device specific secrets
Use: Once per device
"""
import os
import json
from argparse import ArgumentParser
from pprint import pprint

def write_region(region_names, region_secrets):
    f_str = f""
    for r in region_names:
        f_str += f'\n{{ \"{r}\",\"{region_secrets[r]["pub_key"]}\", \"{region_secrets[r]["priv_key_enc"]}\", \"{region_secrets[r]["rand_pass"]}\" }},'
    return f_str

def write_users(user_names, user_secrets):

    f_str = f"\n"
    for u in user_names:
        f_str += f"{{ \"{u}\", \"{user_secrets['users'][u]['hw_secret']}\", \"{user_secrets['users'][u]['pin_hash']}\", \"{user_secrets['users'][u]['pub_key']}\", \"{user_secrets['users'][u]['pvt_key_enc']}\", \"{user_secrets['users'][u]['salt']}\" }},\n"
    return f_str


def main(region_names, user_names, user_secrets, region_secrets, device_dir):
    file_name = "device_secrets.h"

    # create device directory
    try:
        os.mkdir(device_dir)
    except Exception as e:
        print("Could not create directory {device_dir}: {e}".format(device_dir=device_dir, e=e))
        return

    # create device secrets file
    try:
        device_secrets = open(os.path.join(device_dir, file_name), "w")
    except Exception as e:
        print("Unable to open secrets file: {e}".format(e=e))
        return

    # check for valid region names
    
    
    try:
        #rids = list(str(region_secrets[r]) for r in region_names)
        rids = list(region_secrets[r] for r in region_names)
        
        print("\nRegion Secrets\n")
        pprint(rids)
    except Exception as e:
        print("Unable to create secrets file: {e} "
              "Please ensure all regions entered are in the list: {region_secrets}".format(e=e, region_secrets=region_secrets.keys()))
        return

    # check for valid user names
    try:
        #users = [str(user_secrets['users'][u].items()) for u in usernames]
        users = list(user_secrets["users"][u].values() for u in user_names)
        print("\nUser Secrets\n")
        pprint(users)
    except Exception as e:
        print("Unable to create secrets file: {e} "
              "Please ensure all users entered are in the list: {user_secrets}".format(e=e, user_secrets=user_secrets["users"].keys()))
        return

    # write secrets
    device_secrets.write(f'''
#ifndef SECRETS_H
#define SECRETS_H

#define PROVISIONED_REGIONS {len(region_names)}
#define PROVISIONED_USERS {len(user_names)}

#define ROOT_VERIFY \"{user_secrets["root_verify"]}\"

enum USERNAMES {{ {", ".join([u for u in user_names])} }};
enum REGIONS {{ {", ".join([r for r in region_names])} }};

struct R_Data {{
    char *name;
    char *pub_key;
    char *priv_key;
    char *rand;
}};


struct R_Data region_data[{len(region_names)}] = \n{{ { write_region(region_names, region_secrets) }\n}};



struct U_Data {{
    char *name;
    char *hw_secret;
    char *pin_hash;
    char *pub_key;
    char *pvt_key;
    char *salt;
}};

struct U_Data user_data[{len(user_names)}] = \n{{ { write_users(user_names, user_secrets) }}};


#endif // SECRETS_H
''')

# enum USERNAMES {{ {", ".join([u for u in user_names])} }};
# struct U_Data user_data{[len(user_names)]} = {{ {", ".join([u for u in user_names])} }};

def get_args():
    """gets arguments from command line"""
    parser = ArgumentParser(description='main interface to provision system')
    parser.add_argument('--region-list', nargs='+', help='Regions the player is provisioned for.', required=True)
    parser.add_argument('--region-secrets-path', help='Path to region secrets file.', required=True)
    parser.add_argument('--user-list', help='List of users seperated by a space to provision the device for.',
                        nargs='+', required=True)
    parser.add_argument('--user-secrets-path', help='Path to user secrets file generated in createUsers.py',
                        required=True)
    parser.add_argument('--device-dir', help='Path to output any required information for the device.',
                        required=True)
    args = parser.parse_args()
    return args.region_list, args.region_secrets_path, args.user_list, args.user_secrets_path, args.device_dir


if __name__ == '__main__':
    region_names, region_secrets, usernames, user_secrets, device_dir = get_args()
    print("generating device specific secrets")
    user_secrets = json.load(open(os.path.abspath(user_secrets)))
    region_secrets = json.load(open(os.path.abspath(region_secrets)))
    main(region_names, usernames, user_secrets, region_secrets, device_dir)
